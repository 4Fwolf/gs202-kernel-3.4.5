diff -ruN src.orig/mtk_tpd.c src.iq441/mtk_tpd.c
--- src.orig/mtk_tpd.c	2014-04-28 19:44:20.000000000 +0300
+++ src.iq441/mtk_tpd.c	2012-11-01 09:49:22.000000000 +0200
@@ -36,11 +36,6 @@
 struct tpd_device  *tpd = 0;
 static struct tpd_driver_t tpd_driver_list[TP_DRV_MAX_COUNT] ;//= {0};
 
-//Ivan added gobel flag to all TP module
-//Ivan added
-int tp_boot_mode = 0;
-int key_event_flag=0;
-
 static struct platform_driver tpd_driver = {
     .remove     = tpd_remove,
     .shutdown   = NULL,
@@ -58,12 +53,100 @@
 #ifdef CONFIG_HAS_EARLYSUSPEND
 static struct early_suspend MTK_TS_early_suspend_handler = 
 {
-    .level = EARLY_SUSPEND_LEVEL_DISABLE_FB+1,    
+	//Gionee wanght modify level on 2012-06-18 form + to -
+    .level = EARLY_SUSPEND_LEVEL_DISABLE_FB-1,    
     .suspend = NULL,
     .resume  = NULL,
 };
 #endif
+//gionee wld porting from mt6573 20120328 begin
+#if defined (GN_MTK_BSP)
+static ssize_t show_update_pro(struct device_driver *ddri, char *buf)
+{
+    TPD_DMESG(" show_update_fw_pro\n");
+    char ver[20];
+    int time_reg = 0,i;
+    for(i = 1; i < TP_DRV_MAX_COUNT; i++)
+    {
+        /* add tpd driver into list */
+        if(tpd_driver_list[i].tpd_device_name != NULL && tpd_driver_list[i].update_show != NULL)
+        {
+            tpd_driver_list[i].update_show(ver);
+            TPD_DMESG(" store_update_fw_pro***-%d\n",i);
+            break;
+        }
+    }       
+
+    return snprintf(buf, VAR_CHAR_NUM_MAX, "%s\n", ver);        
+}
+static ssize_t store_update_pro(struct device_driver *ddri, char *buf)
+{
+    TPD_DMESG(" store_update_fw_pro\n");
+    char strbuf[10]="OK\n";
+
+    int i;
+    TPD_DMESG(" store_update_fw_pro--%s----\n",buf);
+    if(!strcmp(buf , "update"))
+    {
+        for(i = 1; i < TP_DRV_MAX_COUNT; i++)
+        {
+            /* add tpd driver into list */
+            if(tpd_driver_list[i].tpd_device_name != NULL)
+            {
+                tpd_driver_list[i].update();
+                TPD_DMESG(" store_update_fw_pro***-%d\n",i);
+            }
+        }    
+    }
 
+    return snprintf(buf, VAR_CHAR_NUM_MAX, "%s\n", strbuf);        
+}
+
+static DRIVER_ATTR(update, S_IRUGO |S_IWUSR, show_update_pro, store_update_pro);
+
+static struct driver_attribute *tp_update_attr_list[] = {
+    &driver_attr_update,    
+};
+static int tpd_create_attr(struct device_driver *driver) 
+{
+    int idx, err = 0;
+    int num = (int)(sizeof(tp_update_attr_list)/sizeof(tp_update_attr_list[0]));
+    if (driver == NULL)
+    {
+        return -EINVAL;
+    }
+    TPD_DMESG("tpd_create_attr ----0 \n");
+    for(idx = 0; idx < num; idx++)
+    {
+        if(err = driver_create_file(driver, tp_update_attr_list[idx]))
+        {            
+            TPD_DMESG("TPD  driver_create_file ");
+            break;
+        }
+    }    
+    TPD_DMESG("TPD  driver_create_file success---2\n");
+    return err;
+}
+static int tpd_delete_attr(struct device_driver *driver)
+{
+    int idx ,err = 0;
+    int num = (int)(sizeof(tp_update_attr_list)/sizeof(tp_update_attr_list[0]));
+    if (driver == NULL)
+    {
+        return -EINVAL;
+    }
+
+    for(idx = 0; idx < num; idx++)
+    {
+        driver_remove_file(driver,tp_update_attr_list[idx]);
+    }
+
+
+    return err;
+}
+
+#endif
+//gionee wld porting from mt6573 20120328 end
 static struct tpd_driver_t *g_tpd_drv = NULL;
 /* Add driver: if find TPD_TYPE_CAPACITIVE driver sucessfully, loading it */
 int tpd_driver_add(struct tpd_driver_t *tpd_drv)
@@ -87,10 +170,13 @@
 			tpd_driver_list[0].tpd_local_init = tpd_drv->tpd_local_init;
 			tpd_driver_list[0].suspend = tpd_drv->suspend;
 			tpd_driver_list[0].resume = tpd_drv->resume;
+//gionee wld porting from mt6573 20120328 begin
+#if defined (GN_MTK_BSP)
+		tpd_driver_list[0].update = tpd_drv->update;
+		tpd_driver_list[0].update_show = tpd_drv->update_show;
+#endif
+//gionee wld porting from mt6573 20120328 end
 			tpd_driver_list[0].tpd_have_button = tpd_drv->tpd_have_button;
-			tpd_driver_list[0].tpd_x_res = tpd_drv->tpd_x_res;
-			tpd_driver_list[0].tpd_y_res = tpd_drv->tpd_y_res;
-            tpd_driver_list[0].tpd_get_fw_version = NULL;
 			return 0;
 	}
 	for(i = 1; i < TP_DRV_MAX_COUNT; i++)
@@ -102,12 +188,13 @@
 			tpd_driver_list[i].tpd_local_init = tpd_drv->tpd_local_init;
 			tpd_driver_list[i].suspend = tpd_drv->suspend;
 			tpd_driver_list[i].resume = tpd_drv->resume;
+//gionee wld porting from mt6573 20120328 begin
+#if defined (GN_MTK_BSP)
+            tpd_driver_list[i].update = tpd_drv->update;
+            tpd_driver_list[i].update_show = tpd_drv->update_show;
+#endif
+//gionee wld porting from mt6573 20120328 end
 			tpd_driver_list[i].tpd_have_button = tpd_drv->tpd_have_button;
-			tpd_driver_list[i].tpd_x_res = tpd_drv->tpd_x_res;
-			tpd_driver_list[i].tpd_y_res = tpd_drv->tpd_y_res;
-            tpd_driver_list[i].tpd_get_fw_version = tpd_drv->tpd_get_fw_version;
-			//edit by Magnum 2012-7-10
-			 tpd_driver_list[i].tpd_get_vendor_version= tpd_drv->tpd_get_vendor_version;
 			#if 0
 			if(tpd_drv->tpd_local_init()==0)
 			{
@@ -134,6 +221,14 @@
 	{
 		return -1;
 	}
+//gionee wld porting from mt6573 20120328 begin
+#if defined (GN_MTK_BSP)
+    if(i = tpd_delete_attr(&tpd_driver.driver))
+    {
+        TPD_DMESG("TPD_delete_attr fail: %d\n", i);
+    }
+#endif
+//gionee wld porting from mt6573 20120328 end
 	for(i = 0; i < TP_DRV_MAX_COUNT; i++)
 	{
 		/* find it */
@@ -146,67 +241,6 @@
 	return 0;
 }
 
-//edit by Magnum 2012-7-10 add ctp vendor-id attr
-static ssize_t tpd_vendor_version_show(struct device *dev, 
-		struct device_attribute *attr, char *buf)
-{
-    int vendor = 0;
-    if(g_tpd_drv && g_tpd_drv->tpd_get_vendor_version ){
-        vendor = g_tpd_drv->tpd_get_vendor_version();
-    }
-    return snprintf(buf, PAGE_SIZE, "%x\n", vendor);
-}
-
-static DEVICE_ATTR(vendor_version, S_IRUGO, tpd_vendor_version_show, NULL);
-
-static ssize_t tpd_fw_version_show(struct device *dev, 
-		struct device_attribute *attr, char *buf)
-{
-    int version = 0;
-    if(g_tpd_drv && g_tpd_drv->tpd_get_fw_version ){
-        version = g_tpd_drv->tpd_get_fw_version();
-    }
-    return snprintf(buf, PAGE_SIZE, "%x\n", version);
-}
-
-static DEVICE_ATTR(panel_version, S_IRUGO, tpd_fw_version_show, NULL);
-
-static ssize_t tpd_device_name_show(struct device *dev, 
-		struct device_attribute *attr, char *buf)
-{
-    if (g_tpd_drv && g_tpd_drv->tpd_device_name) {
-        return snprintf(buf, PAGE_SIZE, "%s\n", g_tpd_drv->tpd_device_name);
-    }
-
-    return 0;
-}
-static DEVICE_ATTR(device_name, S_IRUGO, tpd_device_name_show, NULL);
-char phonestate=0;
-/******************************************************************************/
-static ssize_t ft5x06_show_phone_state(struct device* dev, 
-                                 struct device_attribute *attr, char *buf)
-{
-    printk("ft5x06_show_phone_state phonestate=%d\n",phonestate);
-    return snprintf(buf, PAGE_SIZE, "%d\n", phonestate);
-}
-/******************************************************************************/
-static ssize_t ft5x06_store_phone_state(struct device* dev, struct device_attribute *attr,
-                                  const char *buf, size_t count)
-{
-    phonestate=buf[0];
-    printk("ft5x06_store_phone_state phonestate=%d,buf=%d\n",phonestate,buf[0]);
-    return 1;
-}
-/******************************************************************************/
-DEVICE_ATTR(phone_state,     S_IWUSR | S_IWGRP | S_IRUGO, ft5x06_show_phone_state,  ft5x06_store_phone_state);
-void tpd_create_attr_file(void)
-{
-    /* register the attributes */
-     printk("tpd_create_attr_file \n");
-     if (device_create_file(&tpd->dev->dev, &dev_attr_phone_state)){
-             printk("Register the attributes panel version is failed.");
-     }
-} 
 /* touch panel probe */
 static int tpd_probe(struct platform_device *pdev) {
 		int  touch_type = 1; // 0:R-touch, 1: Cap-touch
@@ -235,8 +269,6 @@
     /* allocate input device */
     if((tpd->dev=input_allocate_device())==NULL) { kfree(tpd); return -ENOMEM; }
   
-//Ivan move to lower part of this function
-/*
     TPD_RES_X = simple_strtoul(LCM_WIDTH, NULL, 0);
     TPD_RES_Y = simple_strtoul(LCM_HEIGHT, NULL, 0);
   
@@ -247,11 +279,14 @@
     tpd_mode_min = TPD_RES_Y/2;
     tpd_mode_max = TPD_RES_Y;
     tpd_mode_keypad_tolerance = TPD_RES_X*TPD_RES_X/1600;
-*/
-
     /* struct input_dev dev initialization and registration */
     tpd->dev->name = TPD_DEVICE;
     set_bit(EV_ABS, tpd->dev->evbit);
+//gionee wld porting from mt6573 20120328 begin
+#if defined (GN_MTK_BSP)
+    set_bit(EV_SYN, tpd->dev->evbit);
+#endif
+//gionee wld porting from mt6573 20120328 end
     set_bit(EV_KEY, tpd->dev->evbit);
     set_bit(ABS_X, tpd->dev->absbit);
     set_bit(ABS_Y, tpd->dev->absbit);
@@ -291,24 +326,11 @@
     register_early_suspend(&MTK_TS_early_suspend_handler);
     #endif		  
 #endif	  
-//Ivan <<
-    TPD_RES_X = g_tpd_drv->tpd_x_res;
-    TPD_RES_Y = g_tpd_drv->tpd_y_res;
-
-    printk("mtk_tpd: TPD_RES_X = %d, TPD_RES_Y = %d\n", TPD_RES_X, TPD_RES_Y);
-
-    tpd_mode = TPD_MODE_NORMAL;
-    tpd_mode_axis = 0;
-    tpd_mode_min = TPD_RES_Y/2;
-    tpd_mode_max = TPD_RES_Y;
-    tpd_mode_keypad_tolerance = TPD_RES_X*TPD_RES_X/1600;
-//Ivan >>
-
 //#ifdef TPD_TYPE_CAPACITIVE
 		/* TPD_TYPE_CAPACITIVE handle */
 		if(touch_type == 1){
 			
-//Ivan		set_bit(ABS_MT_TRACKING_ID, tpd->dev->absbit);
+		set_bit(ABS_MT_TRACKING_ID, tpd->dev->absbit);
     	set_bit(ABS_MT_TOUCH_MAJOR, tpd->dev->absbit);
     	set_bit(ABS_MT_TOUCH_MINOR, tpd->dev->absbit);
     	set_bit(ABS_MT_POSITION_X, tpd->dev->absbit);
@@ -324,7 +346,12 @@
 		input_set_abs_params(tpd->dev, ABS_MT_POSITION_X, 0, TPD_RES_X, 0, 0);
 		input_set_abs_params(tpd->dev, ABS_MT_POSITION_Y, 0, TPD_RES_Y, 0, 0);
 		input_set_abs_params(tpd->dev, ABS_MT_TOUCH_MAJOR, 0, 100, 0, 0);
-		input_set_abs_params(tpd->dev, ABS_MT_TOUCH_MINOR, 0, 100, 0, 0); 	
+		input_set_abs_params(tpd->dev, ABS_MT_TOUCH_MINOR, 0, 100, 0, 0); 
+//gionee wld porting from mt6573 20120328 begin
+#if defined (GN_MTK_BSP)
+		input_set_abs_params(tpd->dev, ABS_MT_TRACKING_ID, 0, 3, 0, 0); 
+#endif	
+//gionee wld porting from mt6573 20120328 end
 #endif
     	TPD_DMESG("Cap touch panel driver\n");
   	}
@@ -347,10 +374,8 @@
     #endif
     if(input_register_device(tpd->dev))
         TPD_DMESG("input_register_device failed.(tpd)\n");
-    else {
+    else
 			tpd_register_flag = 1;
-			TPD_DMESG("input_register_device succeed!!\n");
-		}
     /* init R-Touch */
     #if 0
 	  if(touch_type == 0) 
@@ -361,20 +386,20 @@
     if(g_tpd_drv->tpd_have_button)
     {
     	tpd_button_init();
+        }
+//gionee wld porting from mt6573 20120328 begin
+#if defined (GN_MTK_BSP)
+    if(i = tpd_create_attr(&tpd_driver.driver))
+    {
+        TPD_DMESG(" tpd create attribute err = %d\n", i);
     }
-	
-    device_create_file(&tpd->dev->dev, &dev_attr_panel_version);
-    device_create_file(&tpd->dev->dev, &dev_attr_device_name);
-	//edit by Magnum 2012-7-10
-	device_create_file(&tpd->dev->dev, &dev_attr_vendor_version);
-    tpd_create_attr_file();
+#endif
+//gionee wld porting from mt6573 20120328 end
     return 0;
 }
 
 static int tpd_remove(struct platform_device *pdev)
 {
-    device_remove_file(&tpd->dev->dev, &dev_attr_device_name);
-    device_remove_file(&tpd->dev->dev, &dev_attr_panel_version);
 	   input_unregister_device(tpd->dev);
     #ifdef CONFIG_HAS_EARLYSUSPEND
     unregister_early_suspend(&MTK_TS_early_suspend_handler);
diff -ruN src.orig/tpd_button.c src.iq441/tpd_button.c
--- src.orig/tpd_button.c	2014-04-28 19:44:20.000000000 +0300
+++ src.iq441/tpd_button.c	2012-11-01 09:49:22.000000000 +0200
@@ -1,19 +1,13 @@
 #include "tpd.h"
-#include <linux/delay.h>
 
 extern struct tpd_device *tpd;
-extern int tp_boot_mode;
 
 //#ifdef TPD_HAVE_BUTTON
 //static int tpd_keys[TPD_KEY_COUNT] = TPD_KEYS;
 //static int tpd_keys_dim[TPD_KEY_COUNT][4] = TPD_KEYS_DIM;
-#define VIRTUAL_KEY_DEB_TIME	3		//Ivan todo: will move to button init later
 static unsigned int tpd_keycnt = 0;
 static int tpd_keys[TPD_VIRTUAL_KEY_MAX]={0};
 static int tpd_keys_dim[TPD_VIRTUAL_KEY_MAX][4];// = {0};
-static int tpd_debounce[TPD_VIRTUAL_KEY_MAX];
-
-
 static ssize_t mtk_virtual_keys_show(struct kobject *kobj,
                    struct kobj_attribute *attr, char *buf) {
     int i, j;
@@ -45,32 +39,18 @@
 
 struct kobject *properties_kobj;
 
-
-void tpd_clr_key_debounce(void)
-{
-    int i;
-    for (i = 0; i < tpd_keycnt; i++)
-    {
-        //edit by Magnum 2012-2-7
-
-         tpd_debounce[i] = 0; //4//4
-         /*
-        if(cut_debounce==1)
-        {
-          tpd_debounce[i] = 4; //4//4
-          printk("Magnum tpd_debounce is 4\n");
-        } 
-        else
-        {
-		  tpd_debounce[i] = 0;
-		  printk("Magnum tpd_debounce is 0\n");
-        	}*/
-    }
-}
- 
-//[wj add end]
 void tpd_button_init(void) {
-    int ret = 0, i = 0, j=0;
+    int ret = 0, i = 0;
+#if 0
+	for(i=0; i<TPD_VIRTUAL_KEY_MAX; i++)
+	{
+		for(j=0; j<4; j++)
+		{
+			tpd_keys_dim[i][j]=0;
+		}
+	}
+#endif	
+//    if((tpd->kpd=input_allocate_device())==NULL) return -ENOMEM;
     tpd->kpd=input_allocate_device();
     /* struct input_dev kpd initialization and registration */
     tpd->kpd->name = TPD_DEVICE "-kpd";
@@ -104,102 +84,31 @@
                x<=tpd_keys_dim[i][0]+(tpd_keys_dim[i][2]/2) &&
                y>=tpd_keys_dim[i][1]-(tpd_keys_dim[i][3]/2) &&
                y<=tpd_keys_dim[i][1]+(tpd_keys_dim[i][3]/2) &&
-/*               
-               !(tpd->btn_state&(1<<i))) {
+               !(tpd->btn_state&(1<<i))) 
+            {
                 input_report_key(tpd->kpd, tpd_keys[i], 1);
+				input_sync(tpd->kpd);
                 tpd->btn_state|=(1<<i);
                 TPD_DEBUG("[mtk-tpd] press key %d (%d)\n",i, tpd_keys[i]);
-*/
-               !(tpd->btn_state)) {
-                //Accept single key only
-//Ivan add key debounce
-               
-                if (tpd_debounce[i] > VIRTUAL_KEY_DEB_TIME)
-                {
-#ifdef TPD_TYPE_CAPACITIVE		    
-                   if(tp_boot_mode==NORMAL_BOOT){
-				   
-                       tpd_down(x , y, x , y, 1);
-                       input_report_abs(tpd->dev, ABS_MT_TRACKING_ID, 0);
-                    }
-                   else{
-				   
-                       input_report_key(tpd->kpd, tpd_keys[i], 1);
-                    }
-#else
-                 //  printk("Magnum i am in input key is %d\n",i);
-                   input_report_key(tpd->kpd, tpd_keys[i], 1);
-#endif
-//Ivan FIXME ???
-					input_sync(tpd->kpd);
-//
-                   tpd->btn_state|=(1<<i);
-                   TPD_DEBUG("[mt6516-tpd] press key %d (%d)\n",i, tpd_keys[i]);
-                }
-                else
-               {
-                  tpd_debounce[i]++;
-                   TPD_DEBUG("[mt6516-tpd] debounce key %d (%d)\n",i, tpd_keys[i]);
-               }
+				printk("[mtk-tpd] press key %d (%d)\n",i, tpd_keys[i]);
             }
         }
     } else {
         for(i=0;i<tpd_keycnt;i++) {
             if(tpd->btn_state&(1<<i)) {
-#ifdef TPD_TYPE_CAPACITIVE		    		
-                if(tp_boot_mode==NORMAL_BOOT){
-                    tpd_up(x , y, x , y, NULL);
-                    input_report_abs(tpd->dev, ABS_MT_TRACKING_ID, 0);
-                }
-                else{
-                     input_report_key(tpd->kpd, tpd_keys[i], 0);
-                }
-#else
                 input_report_key(tpd->kpd, tpd_keys[i], 0);
-#endif
+				input_sync(tpd->kpd);
                 TPD_DEBUG("[mtk-tpd] release key %d (%d)\n",i, tpd_keys[i]);
+				printk("[mtk-tpd] release key %d (%d)\n",i, tpd_keys[i]);
             }
         }
-        tpd_clr_key_debounce();
         tpd->btn_state=0;
     }
 }
-int tpd_button_discriminate(unsigned int x, unsigned int y) {
-    int i;
-        for(i=0;i<TPD_KEY_COUNT;i++) {
-            if(x>=tpd_keys_dim[i][0]-(tpd_keys_dim[i][2]/2) &&
-               x<=tpd_keys_dim[i][0]+(tpd_keys_dim[i][2]/2) &&
-               y>=tpd_keys_dim[i][1]-(tpd_keys_dim[i][3]/2) &&
-               y<=tpd_keys_dim[i][1]+(tpd_keys_dim[i][3]/2) &&
-               !(tpd->btn_state))
-               {                       //Accept single key only
-                       return tpd_keys[i];
-               }
-        }
-}
 void tpd_button_setting(int keycnt, void *keys, void *keys_dim)
 {
 		tpd_keycnt = keycnt;
 		memcpy(tpd_keys, keys, keycnt*4);
 		memcpy(tpd_keys_dim, keys_dim, keycnt*4*4);
 }
-
-//Ivan added
-void tpd_key(unsigned int index, unsigned int down)
-{
-    if(down) {
-        if(!(tpd->btn_state&(1<<(index-1)))) {
-            input_report_key(tpd->kpd, tpd_keys[(index-1)], 1);
-            tpd->btn_state|=(1<<(index-1));
-            TPD_DEBUG("[mt6516-tpd] press key %d (%d)\n",(index-1), tpd_keys[(index-1)]);
-        }
-    } else {
-        if(tpd->btn_state&(1<<(index-1))) {
-            input_report_key(tpd->kpd, tpd_keys[(index-1)], 0);
-            TPD_DEBUG("[mt6516-tpd] release key %d (%d)\n",(index-1), tpd_keys[(index-1)]);
-        }
-        tpd->btn_state=0;
-    }
-}
-
 //#endif
diff -ruN src.orig/tpd.h src.iq441/tpd.h
--- src.orig/tpd.h	2014-04-28 19:44:20.000000000 +0300
+++ src.iq441/tpd.h	2013-07-23 19:56:34.000000000 +0300
@@ -16,10 +16,11 @@
     #include <mach/mt_typedefs.h>
 #endif
 #ifdef MT6575
-    #include <mach/mt_gpio.h>
-    #include <mach/mt_devs.h>
-    #include <mach/mt_reg_base.h>
-    #include <mach/mt_typedefs.h>
+    //#include <mach/mt6573_pll.h>
+    #include <mach/mt6575_gpio.h>
+    #include <mach/mt6575_devs.h>
+    #include <mach/mt6575_reg_base.h>
+    #include <mach/mt6575_typedefs.h>
 #endif
 #ifdef MT6573
     #include <mach/mt6573_pll.h>
@@ -46,7 +47,7 @@
 //#include "tpd_custom.h"
 
 /* debug macros */
-//#define TPD_DEBUG
+////#define TPD_DEBUG
 #define TPD_DEBUG_CODE
 //#define TPD_DEBUG_TRACK
 #define TPD_DMESG(a,arg...) printk(TPD_DEVICE ": " a,##arg)
@@ -67,7 +68,10 @@
 #define TP_DRV_MAX_COUNT          (20)
 #define TPD_WARP_CNT          (4)
 #define TPD_VIRTUAL_KEY_MAX   (10)
-
+//gionee wld
+#if defined(GN_MTK_BSP)
+#define VAR_CHAR_NUM_MAX      20
+#endif
 /* various mode */
 #define TPD_MODE_NORMAL        0
 #define TPD_MODE_KEYPAD        1
@@ -98,7 +102,7 @@
 extern int TPD_DO_WARP;
 extern int tpd_wb_start[];
 extern int tpd_wb_end[];
-#define TPD_KEY_COUNT           3
+
 struct tpd_device
 {
     struct input_dev *dev;
@@ -114,12 +118,12 @@
 		int (*tpd_local_init)(void);
  		void (*suspend)(struct early_suspend *h);
  		void (*resume)(struct early_suspend *h);
+//gionee wld
+#if defined(GN_MTK_BSP)
+        int (*update_show)(char *ver);
+        int (*update)(void);
+#endif
  		int tpd_have_button;
-//Ivan added
-		int tpd_x_res;
-		int tpd_y_res;
-        int (*tpd_get_fw_version)(void);
-		int (*tpd_get_vendor_version)(void);  //edit by Magnum
 };
 
 #if 1 //#ifdef TPD_HAVE_BUTTON
diff -ruN src.orig/tpd.h.orig src.iq441/tpd.h.orig
--- src.orig/tpd.h.orig	1970-01-01 03:00:00.000000000 +0300
+++ src.iq441/tpd.h.orig	2012-11-01 09:49:22.000000000 +0200
@@ -0,0 +1,167 @@
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/time.h>
+#include <linux/types.h>
+#include <linux/seq_file.h>
+#include <linux/list.h>
+#include <linux/proc_fs.h> 
+
+#ifdef MT6577
+    #include <mach/mt6577_gpio.h>
+    #include <mach/mt6577_devs.h>
+    #include <mach/mt6577_reg_base.h>
+    #include <mach/mt6577_typedefs.h>
+#endif
+#ifdef MT6575
+    //#include <mach/mt6573_pll.h>
+    #include <mach/mt6575_gpio.h>
+    #include <mach/mt6575_devs.h>
+    #include <mach/mt6575_reg_base.h>
+    #include <mach/mt6575_typedefs.h>
+#endif
+#ifdef MT6573
+    #include <mach/mt6573_pll.h>
+    #include <mach/mt6573_gpio.h>
+    #include <mach/mt6573_devs.h>
+    #include <mach/mt6573_reg_base.h>
+    #include <mach/mt6573_typedefs.h>
+#endif
+#ifdef MT6516
+    #include <mach/mt6516_pll.h>
+    #include <mach/mt6516_gpio.h>
+    #include <mach/mt6516_devs.h>
+    #include <mach/mt6516_boot.h>
+    #include <mach/mt6516_reg_base.h>
+    #include <mach/mt6516_typedefs.h>
+#endif
+#include <mach/board.h>
+#include <mach/irqs.h>
+#include <asm/io.h>
+#include <linux/platform_device.h>
+#include <linux/autoconf.h>
+#include <linux/kobject.h>
+#include <linux/earlysuspend.h>
+//#include "tpd_custom.h"
+
+/* debug macros */
+////#define TPD_DEBUG
+#define TPD_DEBUG_CODE
+//#define TPD_DEBUG_TRACK
+#define TPD_DMESG(a,arg...) printk(TPD_DEVICE ": " a,##arg)
+#if defined(TPD_DEBUG)
+#undef TPD_DEBUG
+#define TPD_DEBUG(a,arg...) printk(TPD_DEVICE ": " a,##arg)
+#else
+#define TPD_DEBUG(arg...) 
+#endif
+
+/* register, address, configurations */
+#define TPD_DEVICE            "mtk-tpd"
+#define TPD_X                  0
+#define TPD_Y                  1
+#define TPD_Z1                 2
+#define TPD_Z2                 3
+#define TP_DELAY              (2*HZ/100)
+#define TP_DRV_MAX_COUNT          (20)
+#define TPD_WARP_CNT          (4)
+#define TPD_VIRTUAL_KEY_MAX   (10)
+//gionee wld
+#if defined(GN_MTK_BSP)
+#define VAR_CHAR_NUM_MAX      20
+#endif
+/* various mode */
+#define TPD_MODE_NORMAL        0
+#define TPD_MODE_KEYPAD        1
+#define TPD_MODE_SW 2
+#define TPD_MODE_FAV_SW 3
+#define TPD_MODE_FAV_HW 4
+#define TPD_MODE_RAW_DATA 5
+#undef TPD_RES_X
+#undef TPD_RES_Y
+extern int TPD_RES_X;
+extern int TPD_RES_Y;
+extern int tpd_load_status ; //0: failed, 1: sucess
+extern int tpd_mode;
+extern int tpd_mode_axis;
+extern int tpd_mode_min;
+extern int tpd_mode_max;
+extern int tpd_mode_keypad_tolerance;
+extern int tpd_em_debounce_time;
+extern int tpd_em_debounce_time0;
+extern int tpd_em_debounce_time1;
+extern int tpd_em_asamp;
+extern int tpd_em_auto_time_interval;
+extern int tpd_em_sample_cnt;
+extern int tpd_calmat[];
+extern int tpd_def_calmat[];
+extern int tpd_calmat[];
+extern int tpd_def_calmat[];
+extern int TPD_DO_WARP;
+extern int tpd_wb_start[];
+extern int tpd_wb_end[];
+
+struct tpd_device
+{
+    struct input_dev *dev;
+    struct input_dev *kpd;
+    struct timer_list timer;
+    struct tasklet_struct tasklet;
+    int btn_state;
+};
+
+struct tpd_driver_t
+{
+		char *tpd_device_name;
+		int (*tpd_local_init)(void);
+ 		void (*suspend)(struct early_suspend *h);
+ 		void (*resume)(struct early_suspend *h);
+//gionee wld
+#if defined(GN_MTK_BSP)
+        int (*update_show)(char *ver);
+        int (*update)(void);
+#endif
+ 		int tpd_have_button;
+};
+
+#if 1 //#ifdef TPD_HAVE_BUTTON
+void tpd_button(unsigned int x, unsigned int y, unsigned int down);
+void tpd_button_init(void);
+ssize_t tpd_virtual_key(char *buf);
+//#ifndef TPD_BUTTON_HEIGHT
+//#define TPD_BUTTON_HEIGHT TPD_RES_Y
+//#endif
+#endif
+
+#if 0
+void tpd_adc_init(void);
+void tpd_set_debounce_time(int debounce_time);
+void tpd_set_spl_number(int spl_num);
+u16 tpd_read(int position);
+u16 tpd_read_adc(u16 pos);
+u16 tpd_read_status(void);
+#endif
+
+extern int tpd_driver_add(struct tpd_driver_t *tpd_drv);
+extern int tpd_driver_remove(struct tpd_driver_t *tpd_drv);
+void tpd_button_setting(int keycnt, void *keys, void *keys_dim);
+extern int tpd_em_spl_num;
+extern int tpd_em_pressure_threshold;
+
+#ifdef TPD_DEBUG_CODE
+#include "tpd_debug.h"
+#endif
+
+#ifdef TPD_HAVE_CALIBRATION
+#include "tpd_calibrate.h"
+#endif
+
+#include "tpd_default.h"
+
+/* switch touch panel into different mode */
+void _tpd_switch_single_mode(void);
+void _tpd_switch_multiple_mode(void);
+void _tpd_switch_sleep_mode(void);
+void _tpd_switch_normal_mode(void);   
